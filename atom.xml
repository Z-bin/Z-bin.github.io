<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhoubin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhoubin.wang/"/>
  <updated>2018-02-17T14:54:51.128Z</updated>
  <id>http://www.zhoubin.wang/</id>
  
  <author>
    <name>小子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-2018</title>
    <link href="http://www.zhoubin.wang/2018/02/17/2017-2018/"/>
    <id>http://www.zhoubin.wang/2018/02/17/2017-2018/</id>
    <published>2018-02-17T14:54:51.000Z</published>
    <updated>2018-02-17T14:54:51.128Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>尽可能使用const</title>
    <link href="http://www.zhoubin.wang/2018/01/22/%E5%B0%BD%E5%8F%AF%E8%83%BD%E4%BD%BF%E7%94%A8const/"/>
    <id>http://www.zhoubin.wang/2018/01/22/尽可能使用const/</id>
    <published>2018-01-22T14:47:29.000Z</published>
    <updated>2018-01-24T12:08:33.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顶层const与底层const"><a href="#顶层const与底层const" class="headerlink" title="顶层const与底层const"></a>顶层const与底层const</h3><p>①如果关键字出现在星号左边表明被指物是常量；如果星号出现在右边，表明指针自身是常量；如果出现在星号两边，表明被指物和指针都是常量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int i = 0, j = 3;</span><br><span class="line">float k= 1;</span><br><span class="line"></span><br><span class="line">int* const p = &amp;i; //表明指针p是一个常量不可以改变</span><br><span class="line">p = &amp;j;          //错误</span><br><span class="line"></span><br><span class="line">const int *p1 = &amp;i;//表明被指物是常量不可以改变，即*p1不可以改变</span><br><span class="line">*p1 = j;           //错误</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>②声明迭代器为const就像声明指针为const一样，表明这个迭代器不得指向不同的东西，但所指东西的值可以改变。如果希望迭代器所指的东西不可改动，则是const_iterator。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vec&#123; 1,2,3,4,5 &#125;;</span><br><span class="line">const vector&lt;int&gt;::iterator iter = vec.begin();</span><br><span class="line">*iter = 10;   </span><br><span class="line">iter++;      //错误iter不可以被改变</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;::const_iterator cIter = vec.begin();</span><br><span class="line">*cIter=10    //错误*cIter不可以被改变</span><br></pre></td></tr></table></figure></p><p>③令函数返回一个常量值，可以降低客户错误而造成的意外，又不至于放弃安全性和高效性。</p><h3 id="bitwise-constness和logical-constness"><a href="#bitwise-constness和logical-constness" class="headerlink" title="bitwise constness和logical constness"></a>bitwise constness和logical constness</h3><p>①bitwise constness阵营的人相信,成员函数只有在不更改对象之任何成员变量时才可以说是const。也就是说不更改对象内任何一个bit。但下面有个反例。</p><p>&lt; !–more–&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class CtextBlock</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">CtextBlock(char *str)</span><br><span class="line">&#123;</span><br><span class="line">pText = new char[100];</span><br><span class="line">strcpy(pText, str);</span><br><span class="line">&#125;</span><br><span class="line">char&amp; operator[](size_t position) const</span><br><span class="line">&#123;</span><br><span class="line">return pText[position];</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line">char *pText;</span><br><span class="line">const CtextBlock cctb(&quot;hello&quot;);</span><br><span class="line">char *pc = &amp;cctb[0];</span><br><span class="line">*pc = &apos;J&apos;;//这时候cctb就变成了&quot;Jello&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>②logical constness阵营的人认为一个const函数可以修改它所处理对象内的某些bits，这个时候可以用mutable关键字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class CTextBlock</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">size_t length() const;</span><br><span class="line">private:</span><br><span class="line">char * pText;</span><br><span class="line">mutable size_t textLength;</span><br><span class="line">mutable bool lengthIsValid;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">size_t CTextBlock::length() const</span><br><span class="line">&#123;</span><br><span class="line">if (!lengthIsValid)</span><br><span class="line">&#123;</span><br><span class="line">textLength = strlen(pText);</span><br><span class="line">lengthIsValid = true;</span><br><span class="line">&#125;</span><br><span class="line">return textLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>###当const和non-const成员函数有着实质的等价实现时，令non-const版本调用const版本可避免代码重复。反过来则不行</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;顶层const与底层const&quot;&gt;&lt;a href=&quot;#顶层const与底层const&quot; class=&quot;headerlink&quot; title=&quot;顶层const与底层const&quot;&gt;&lt;/a&gt;顶层const与底层const&lt;/h3&gt;&lt;p&gt;①如果关键字出现在星号左边表明被指物是常量；如果星号出现在右边，表明指针自身是常量；如果出现在星号两边，表明被指物和指针都是常量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i = 0, j = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float k= 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int* const p = &amp;amp;i; //表明指针p是一个常量不可以改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = &amp;amp;j;	          //错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;const int *p1 = &amp;amp;i;//表明被指物是常量不可以改变，即*p1不可以改变&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*p1 = j;           //错误&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Effective C++" scheme="http://www.zhoubin.wang/categories/Effective-C/"/>
    
    
      <category term="C++" scheme="http://www.zhoubin.wang/tags/C/"/>
    
  </entry>
  
</feed>
